#include "LittleUtils.hpp"
#include "Teleport.hpp"

struct TeleportInModule : Teleport {
	enum ParamIds {
		NUM_PARAMS
	};
	enum InputIds {
		TRIG_INPUT,
		NUM_INPUTS
	};
	enum OutputIds {
		TRIG_OUTPUT,
		GATE_OUTPUT,
		TOGGLE_OUTPUT,
		NUM_OUTPUTS
	};
	enum LightIds {
		TRIG_LIGHT,
		GATE_LIGHT,
		TOGGLE_LIGHT,
		NUM_LIGHTS
	};

	//bool gate = false;
	//bool toggle = false; // TODO: serialize to json
	//SchmittTrigger inputTrigger;
	//PulseGenerator triggerGenerator;

	TeleportInModule() : Teleport(NUM_PARAMS, NUM_INPUTS, NUM_OUTPUTS, NUM_LIGHTS) {
		//params[TOGGLE_PARAM].value = 0.f;
	}
	void step() override;


	// For more advanced Module features, read Rack's engine.hpp header file
	// - toJson, fromJson: serialization of internal data
	// - onSampleRateChange: event triggered by a change of sample rate
	// - onReset, onRandomize, onCreate, onDelete: implements special behavior when user clicks these from the context menu
};


void TeleportInModule::step() {
	float deltaTime = engineGetSampleTime();
}


//struct ButtonWidget : SVGButton {
	//ButtonModule *module = NULL;

	////template <typename T = ButtonWidget>
	////static T *create(Vec pos, Module *module)
	////onAction()

	//ButtonWidget() {
	//	//TODO: own button images here
	//	setSVGs(SVG::load(assetGlobal("res/ComponentLibrary/BefacoPush_0.svg")),
	//			SVG::load(assetGlobal("res/ComponentLibrary/BefacoPush_1.svg")));
	//}

	//template <typename T = ButtonWidget>
	//static T* create(Vec pos, ButtonModule *module) {
	//	ButtonWidget *o = Widget::create<ButtonWidget>(pos);
	//	o->module = module;
	//	return o;
	//}

	//void onAction(EventAction &e) override {
	//	module->triggerGenerator.trigger(1e-3f);
	//}
//};

struct TeleportInModuleWidget : ModuleWidget {
	TeleportInModuleWidget(TeleportInModule *module) : ModuleWidget(module) {
		setPanel(SVG::load(assetPlugin(plugin, "res/Button_background.svg")));

		addChild(Widget::create<ScrewSilver>(Vec(RACK_GRID_WIDTH, 0)));
		addChild(Widget::create<ScrewSilver>(Vec(RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));

		addChild(ParamWidget::create<ButtonWidget>(Vec(7.5, 7.5 + RACK_GRID_WIDTH), module, ButtonModule::BUTTON_PARAM, 0.0f, 1.0f, 0.0f));

		//addInput(createInputCentered<PJ301MPort>(Vec(22.5, 135), module, ButtonModule::TRIG_INPUT));
		//addOutput(createOutputCentered<PJ301MPort>(Vec(22.5, 195), module, ButtonModule::TRIG_OUTPUT));
		//addOutput(createOutputCentered<PJ301MPort>(Vec(22.5, 255), module, ButtonModule::GATE_OUTPUT));
		//addOutput(createOutputCentered<PJ301MPort>(Vec(22.5, 315), module, ButtonModule::TOGGLE_OUTPUT));

	}
};


// Specify the Module and ModuleWidget subclass, human-readable
// author name for categorization per plugin, module slug (should never
// change), human-readable module name, and any number of tags
// (found in `include/tags.hpp`) separated by commas.
Model *modelTeleportInModule = Model::create<TeleportInModule, TeleportInModuleWidget>("Little Utils", "Teleport In", "Teleport In", UTILITY_TAG);
